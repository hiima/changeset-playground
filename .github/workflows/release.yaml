name: Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create-release-pr:
    name: Create Release Pull Request
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json

      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - name: Create Release Pull Request
        uses: changesets/action@v1
        with:
          version: pnpm run version
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'changeset-release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          package_json_file: package.json

      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Detect releases
        id: detect
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RELEASES=$(node .github/scripts/detect-releases.js ${{ github.event.pull_request.number }})
          echo "releases<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Release targets:"
          echo "$RELEASES" | jq -r '.[] | "  - \(.name)@\(.version)"'

      - name: Publish
        run: |
          echo "Publishing packages..."
          echo '${{ steps.detect.outputs.releases }}' | jq -r '.[] | "  ðŸ“¦ \(.name)@\(.version)"'
          echo "âœ… Published successfully (dummy)"

      - name: Create GitHub Releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo '${{ steps.detect.outputs.releases }}' | jq -c '.[]' | while read -r release; do
            NAME=$(echo "$release" | jq -r '.name')
            VERSION=$(echo "$release" | jq -r '.version')
            CHANGELOG=$(echo "$release" | jq -r '.changelog')
            TAG="${NAME}@${VERSION}"

            echo "Creating release for $TAG..."

            gh release create "$TAG" \
              --title "$TAG" \
              --notes "$CHANGELOG" \
              --verify-tag=false

            echo "âœ… Created release: $TAG"
          done
